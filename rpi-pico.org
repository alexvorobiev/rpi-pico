#+TITLE: Raspberry Pi Pico W  with Waveshare motor driver in NixOS WSL
#+STARTUP: inlineimages
#+options: toc:2
#+last_modified: 2023-11-09 22:11:33 alex

* Table of contents                                                     :TOC:
- [[#the-project][The project]]
- [[#rpi-pico-w][RPi Pico W]]
  - [[#resources][Resources]]
  - [[#install-micropython][Install MicroPython]]
  - [[#usbip][USBIP]]
  - [[#rshell][rshell]]
  - [[#emacs-micorpython-mode][Emacs micorpython mode]]
- [[#waveshare-motor-driver][Waveshare Motor Driver]]
  - [[#resources-1][Resources]]
  - [[#download-demo-code][Download Demo code]]
- [[#additional-motor-driver-sparkfun-tb6612fng][Additional motor driver Sparkfun TB6612FNG]]
  - [[#resources-2][Resources]]
- [[#wifi][WiFi]]
  - [[#resources-3][Resources]]

* The project
The goal is to control a toy robotic arm (5 DC motors plus LED) with Raspberry Pi Pico W. The arm is sold under different names (e.g. https://www.velleman.eu/products/view/?id=375310,  https://owirobot.com/robotic-arm-edge) but it also can be found  as a no-name set on AliExpress. There is an add-on to control it over USB (https://www.velleman.eu/products/view/?id=436330),  so I am basically creating a "smart") (the code runs on Pico instead of the PC) version of that that.
* RPi Pico W
** Resources
- https://www.twilio.com/blog/programming-raspberry-pi-pico-microcontroller-micropython
- https://micropython.org/download/RPI_PICO_W
- https://github.com/dhylands/rshell
- https://docs.micropython.org/en/latest/
- https://microcontrollerslab.com/dual-core-raspberry-pi-pico-programming-micropython/

** Install MicroPython
New Pico will connect as Windows drive. Download the lastest =.uf2=  from https://micropython.org/download/RPI_PICO_W and copy it to the Pico drive. It will reboot automatically. Note, Pico and Pico W use different MicroPython package.
** USBIP
#+name: busid
#+begin_src sh :results output
  /mnt/c/Program\ Files/usbipd-win/usbipd.exe wsl list | \
      grep 'USB Serial Device' | \
      sed -E 's/^([0-9]+-[0-9]+).*/\1/'
#+end_src

#+RESULTS: busid
: 1-1

#+begin_src sh :var busid=busid :results output
  wsl-sudo /mnt/c/Program\ Files/usbipd-win/usbipd.exe wsl attach --busid $busid
#+end_src

#+RESULTS:

#+begin_src sh :results verbatim
  lsusb | grep MicroPython
#+end_src

#+RESULTS:
: Bus 001 Device 002: ID 2e8a:0005 MicroPython Board in FS mode
** rshell
#+begin_src emacs-lisp
  (add-hook 'comint-rshell-hook
            #'(lambda () (setq comint-process-echoes t)))

  (comint-run "rshell" '("-p" "/dev/ttyACM0" "--buffer-size" "512"))
#+end_src

#+RESULTS:
So that  the =*this*= variable works in the blocks below (https://emacs.stackexchange.com/a/53680)
#+begin_src emacs-lisp
  (advice-add
   'org-babel-ref-resolve
   :around (lambda (fun ref)
             (if (stringp ref)
                 (funcall fun ref)
               (eval ref))))
#+end_src

#+RESULTS:

#+begin_src sh :session *rshell* :results output :post '(ansi-color-apply *this*)
  help
#+end_src

#+RESULTS:
: <topic>):
: ========================================
: args    cat  connect  date  edit  filesize  help  mkdir  rm     shell
: boards  cd   cp       echo  exit  filetype  ls    repl   rsync
:
: Use Control-D (or the exit command) to exit rshell.
: /home/alex/src/rpi-pico> org_babel_sh_eoe

#+begin_src python :session *rshell*
  repl
#+end_src

This hangs...
#+begin_src python :session *Python*
  led.on()
  return 0
#+end_src
** Emacs micorpython mode
https://github.com/picospuch/micropython-mode
#+begin_src emacs-lisp
  (use-package micropython-mode
    :load-path "/home/alex/src/rpi-pico/micropython-mode"
    :config
    (add-hook 'micropython-mode-hook
              #'(lambda ()
                  (setq-local python-shell-interpreter "picocom")
                  (setq-local python-shell-interpreter-args "-b 115200 /dev/ttyACM0")))
    (add-hook 'lsp-mode-hook
              #'(lambda ()
                  (add-to-list 'lsp-language-id-configuration '(micropython-mode . "python")))))
#+end_src

#+RESULTS:
: t

* Waveshare Motor Driver
- I2C controlled, supports 32x different I2C addresses by setting the 5 address jumpers
- Onboard PCA9685 chip, provides 12-bit hardware PWM to adjust motor speed
- Onboard TB6612FNG dual H-bridge motor driver
- Integrates 5V regulator, up to 3A output current, can be powered from a battery through the VIN terminal
- Breaks out unused pins of the Pico for easy extension
** Resources
- https://www.waveshare.com/wiki/Pico-Motor-Driver
- wget  https://www.waveshare.com/w/upload/5/5c/Pico-Motor-Driver-code.7z
- http://wiki.sunfounder.cc/index.php?title=PCA9685_16_Channel_12_Bit_PWM_Servo_Driver
-
** Download Demo code
#+begin_src sh
  wget https://www.waveshare.com/w/upload/5/5c/Pico-Motor-Driver-code.7z
#+end_src

#+RESULTS:
#+begin_src sh :results raw
  7z x Pico-Motor-Driver-code.7z -o./Pico-Motor-Driver-code
#+end_src

#+RESULTS:

7-Zip [64] 17.05 : Copyright (c) 1999-2021 Igor Pavlov : 2017-08-28
p7zip Version 17.05 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,8 CPUs x64)

Scanning the drive for archives:
1 file, 1633 bytes (2 KiB)

Extracting archive: Pico-Motor-Driver-code.7z
--
Path = Pico-Motor-Driver-code.7z
Type = 7z
Physical Size = 1633
Headers Size = 148
Method = LZMA2:6k
Solid = -
Blocks = 1

Everything is Ok

Size:       5290
Compressed: 1633
**
* Additional motor driver Sparkfun TB6612FNG
Waveshare only supports four motors. A separate TB6612FNG-based driver will control the fifth motor. The API is also PWM but unlike PCA9685 (which implements PWM in hardware), MicroPython's [[https://docs.micropython.org/en/latest/library/machine.PWM.html][machine.PWM]] class needs to be used.
** Resources
- https://c2plabs.com/blog/2021/09/12/controlling-dc-motor-using-raspberry-pi-pico-rp2040-and-tb6612fng/
- https://www.instructables.com/Driving-Small-Motors-With-the-TB6612FNG/
- https://docs.micropython.org/en/latest/library/machine.PWM.html


* WiFi
Enabling the wireless chip

** Resources
- https://youtu.be/fqsOZ_FVgfg
